### Simion George-Vlad  
**342C5**  

#### Assignment 3 - IoT Platform Using Microservices  

The assignment consists of collecting, storing, and visualizing numerical data from IoT devices.  

The components of the project are:  

1. **Devices with sensors connected to the Internet** – A Python-based simulator was created to emulate devices sending data to a message broker.  
2. **Message broker** – The latest version of Eclipse Mosquitto was used as a microservice to implement the required MQTT version. The `paho.mqtt` library was used in both the adapter and simulator (both written in Python) to establish a connection to the broker. In Docker, the microservice was mapped to port 1883, with a dedicated network allowing only the adapter and broker to connect. A Mosquitto configuration file was created to avoid authentication requirements and enable listening on port 1883.  
3. **Time Series Database (TSDB)** – InfluxDB v2 was used, mapped to port 8086. A local volume was created for data persistence when the microservice stops. The database belongs to the adapter’s network and another network connected to Grafana.  
4. **Adapter** – Implemented in Python, the adapter parses messages from sensors and writes them to the database. Logging was configured as required, with an environment variable controlling log display. The `_on_message` function processes incoming messages, extracts data, and prepares it for database storage. The `influxdb_client` library was used, leveraging features like client creation, the `Point` class for proper formatting, and writing via `WriteOptions`.  
5. **Grafana** – Version 11.4.0 was used for data visualization, mapped to port 3000 with a dedicated network allowing only the adapter and Grafana to connect. Local configuration was done using `dashboard.yml` and `datasource.yaml` to ensure dashboards are available upon login.  

#### How to Run:  
1. Run `./run.sh` to start all microservices and create necessary networks.  
2. Run `sudo ./cleanup.sh` to stop all microservices and delete networks and persistent volumes.  

#### How to Use:  
1. To view data in Grafana, open a browser and go to `http://localhost:80`, then log in with:  
   - **Username:** `asistent`  
   - **Password:** `grafanaSCD2024`  
2. To run the simulator, navigate to the `simulator` directory and execute:  
   ```
   python3 mqtt_device_simulator.py
   ```
